class TreeNode {
    constructor(val = 0, left = null, right = null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

function sortedArrayToBST(nums) {
    if (nums.length === 0) return null;

    function buildBST(left, right) {
        if (left > right) return null;

        const mid = Math.floor((left + right) / 2);
        const node = new TreeNode(nums[mid]);

        node.left = buildBST(left, mid - 1);
        node.right = buildBST(mid + 1, right);

        return node;
    }

    return buildBST(0, nums.length - 1);
}


function printTree(root) {
    if (!root) return [];

    const result = [];
    const queue = [root];

    while (queue.length > 0) {
        const node = queue.shift();
        if (node) {
            result.push(node.val);
            queue.push(node.left);
            queue.push(node.right);
        } else {
            result.push(null);
        }
    }

    // Remove trailing nulls
    while (result[result.length - 1] === null) {
        result.pop();
    }

    return result;
}


const nums1 = [-10, -3, 0, 5, 9];
const root1 = sortedArrayToBST(nums1);
console.log(printTree(root1)); 

const nums2 = [1, 3];
const root2 = sortedArrayToBST(nums2);
console.log(printTree(root2)); 
